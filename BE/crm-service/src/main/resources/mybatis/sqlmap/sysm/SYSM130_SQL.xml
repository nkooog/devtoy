<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bcs.aicrm.sysm.service.mapper.SYSM130Mapper">

	<select id="SYSM130SEL01" parameterType="SYSM130VO" resultType="SYSM130VO">
		WITH RECURSIVE orgsTree AS (
			SELECT
			    o.tenant_id AS tenantId,
				o.org_cd AS orgCd,
				o.org_nm AS orgNm,
				o.hgrk_org_cd AS hgrkOrgCd,
				0 AS level,
				ARRAY[o.srt_seq] AS path,  -- 타입을 text[]로 명시적으로 설정
				false AS cycle  -- 순환 여부 초기화
			FROM
				t_org_cd o
			WHERE o.tenant_id = #{tenantId}
			AND o.hgrk_org_cd IS NULL

			UNION ALL

			SELECT
			    o.tenant_id,
				o.org_cd,
				o.org_nm,
				o.hgrk_org_cd,
				ot.level + 1,
				ot.path || o.srt_seq,  -- 경로에 현재 org_cd 추가
				o.org_cd = any(ot.path::text[])  -- path를 text[]로 형변환하여 비교
			FROM
				t_org_cd o
			JOIN orgsTree ot ON o.hgrk_org_cd = ot.orgCd
			WHERE o.tenant_id = #{tenantId}
		)

		SELECT
				 ROW_NUMBER() OVER (ORDER BY path)         	AS srtSeq
				,C.TENANT_ID        		AS tenantId
				, C.ORG_CD           		AS orgCd
				, C.ORG_DV_CD        		AS orgDvCd
				, C.ORG_NM           		AS orgNm
				, C.PRS_LVL_CD       		AS prsLvlCd
				, C.HGRK_ORG_CD      		AS hgrkOrgCd
				, p.ORG_NM           		AS hgrkOrgNm
				, C.EXTN_LINK_CD     		AS extnLinkCd
				, C.ORG_ST_CD        		AS orgStCd
				, C.KMS_DISP_YN      		AS kmsDispYn
				, C.KMS_CTGR_NO      		AS kmsCtgrNo
				, ctg.CTGR_NM        		AS kmsCtgrNm
				, C.REG_DTM          		AS regDtm
				, C.REGR_ID          		AS regrId
				, usr.USR_NM         		AS lstCorprNm
				, C.REGR_ORG_CD      		AS regrOrgCd
				, C.LST_CORC_DTM     		AS lstCorcDtm
				, C.LST_CORPR_ID     		AS lstCorprId
				, C.LST_CORPR_ORG_CD 		AS lstCorprOrgCd
				, C.ABOL_DTM         		AS abolDtm
				, C.ABOLMN_ID        		AS abolmnId
				, C.ABOLMN_ORG_CD    		AS abolmnOrgCd
				, T.ORG_LVL_CD  	   		AS orgLvlCd
				, (select count(*) from t_org_cd z where c.org_cd = z.hgrk_org_cd ) AS childCnt
				, C.ORG_ST_CD               AS oriOrgStCd
		FROM orgsTree
		JOIN T_ORG_CD AS C
		ON orgsTree.orgCd = c.org_cd AND orgsTree.tenantId = c.tenant_id
				LEFT JOIN T_ORG_CD AS P
				ON C.TENANT_ID 			= P.TENANT_ID
				AND C.HGRK_ORG_CD			= P.ORG_CD
				LEFT JOIN T_KLD_CTGR AS ctg
				ON C.TENANT_ID 			= ctg.TENANT_ID
				AND C.KMS_CTGR_NO 		= ctg.CTGR_NO
				LEFT JOIN T_USR_INFO_MGNT AS usr
				ON C.TENANT_ID 			= usr.TENANT_ID
				AND C.LST_CORPR_ID 		= usr.USR_ID
				LEFT JOIN t_tenant_info AS T
				ON C.tenant_id 			= T.tenant_id
		ORDER BY path
	</select>

	<select id="SYSM130INS01" parameterType="SYSM130VO" resultType="SYSM130VO">
		INSERT INTO T_ORG_CD (
			TENANT_ID,
			ORG_CD,
			ORG_DV_CD,
			ORG_NM,
			PRS_LVL_CD,
			HGRK_ORG_CD,
			SRT_SEQ,
			EXTN_LINK_CD,
			ORG_ST_CD,
			KMS_DISP_YN,
			KMS_CTGR_NO,
			REG_DTM,
			REGR_ID,
			REGR_ORG_CD,
			LST_CORC_DTM,
			LST_CORPR_ID,
			LST_CORPR_ORG_CD
		)
		VALUES (
			#{tenantId},
			#{orgCd},
			#{orgDvCd},
			#{orgNm},
			#{prsLvlCd},
			#{hgrkOrgCd},
    		#{srtSeq},  -- CAST로 문자열을 숫자 타입으로 변환 후 연산
			#{extnLinkCd},
			#{orgStCd},
			#{kmsDispYn},
			#{kmsCtgrNo},
			CURRENT_TIMESTAMP,
			#{regrId},
			#{regrOrgCd},
			CURRENT_TIMESTAMP,
			#{lstCorprId},
			#{lstCorprOrgCd}
		)
		ON CONFLICT (TENANT_ID, ORG_CD) -- 충돌 조건 (중복 키)
		DO UPDATE
		SET
			ORG_DV_CD  			= EXCLUDED.ORG_DV_CD
		  , ORG_NM  			= EXCLUDED.ORG_NM
		  , PRS_LVL_CD  		= EXCLUDED.PRS_LVL_CD
		  , HGRK_ORG_CD  		= EXCLUDED.HGRK_ORG_CD
		  , EXTN_LINK_CD  		= EXCLUDED.EXTN_LINK_CD
		  , ORG_ST_CD  			= EXCLUDED.ORG_ST_CD
		  , KMS_DISP_YN  		= EXCLUDED.KMS_DISP_YN
		  , KMS_CTGR_NO  		= EXCLUDED.KMS_CTGR_NO
    ,LST_CORPR_ID = CASE
                      WHEN (T_ORG_CD.ORG_DV_CD IS DISTINCT FROM EXCLUDED.ORG_DV_CD
                            OR T_ORG_CD.HGRK_ORG_CD IS DISTINCT FROM EXCLUDED.HGRK_ORG_CD
                            OR T_ORG_CD.ORG_NM IS DISTINCT FROM EXCLUDED.ORG_NM)
                      THEN EXCLUDED.LST_CORPR_ID
                      ELSE T_ORG_CD.LST_CORPR_ID
                   END
    ,LST_CORPR_ORG_CD = CASE
                          WHEN (T_ORG_CD.ORG_DV_CD IS DISTINCT FROM EXCLUDED.ORG_DV_CD
                                OR T_ORG_CD.HGRK_ORG_CD IS DISTINCT FROM EXCLUDED.HGRK_ORG_CD
                                OR T_ORG_CD.ORG_NM IS DISTINCT FROM EXCLUDED.ORG_NM)
                          THEN EXCLUDED.LST_CORPR_ORG_CD
                          ELSE T_ORG_CD.LST_CORPR_ORG_CD
                       END
    ,LST_CORC_DTM = CASE
                      WHEN (T_ORG_CD.ORG_DV_CD IS DISTINCT FROM EXCLUDED.ORG_DV_CD
                            OR T_ORG_CD.HGRK_ORG_CD IS DISTINCT FROM EXCLUDED.HGRK_ORG_CD
                            OR T_ORG_CD.ORG_NM IS DISTINCT FROM EXCLUDED.ORG_NM)
                      THEN CURRENT_TIMESTAMP
                      ELSE T_ORG_CD.LST_CORC_DTM
                   END
		RETURNING
			TENANT_ID AS tenantId,
		    SRT_SEQ AS srtSeq,
		    ORG_CD AS orgCd,
		    org_st_cd AS orgStCd,
		    CASE
				WHEN (SELECT COUNT(*) FROM T_ORG_CD WHERE TENANT_ID = #{tenantId} AND ORG_CD = #{orgCd}) > 0 THEN 'UPDATE'
				ELSE 'INSERT'
			END AS operationType
	</select>

	<update id="SYSM130UPT01" parameterType="SYSM130VO">
		WITH RECURSIVE orgsTree AS (
			SELECT
				o.org_cd AS orgCd,
				o.org_nm AS orgNm,
				o.hgrk_org_cd AS hgrkOrgCd,
				0 AS level,
				ARRAY[o.srt_seq] AS path,  -- 타입을 text[]로 명시적으로 설정
				false AS cycle  -- 순환 여부 초기화
			FROM
				t_org_cd o
			WHERE o.tenant_id = #{tenantId}
			AND o.hgrk_org_cd IS NULL

			UNION ALL

			SELECT
				o.org_cd,
				o.org_nm,
				o.hgrk_org_cd,
				ot.level + 1,
				ot.path || o.srt_seq,  -- 경로에 현재 org_cd 추가
				o.org_cd = any(ot.path::text[])  -- path를 text[]로 형변환하여 비교
			FROM
				t_org_cd o
			JOIN orgsTree ot ON o.hgrk_org_cd = ot.orgCd
			WHERE o.tenant_id = #{tenantId}
		)

		UPDATE T_ORG_CD C
		SET srt_seq = ot.srtSeq
		FROM (
			SELECT
				ROW_NUMBER() OVER (ORDER BY path) AS srtSeq,
				C.ORG_CD,
				C.TENANT_ID
			FROM orgsTree ot
			JOIN T_ORG_CD C ON ot.orgCd = C.ORG_CD
			WHERE C.tenant_id = #{tenantId}
		) ot
		WHERE C.ORG_CD = ot.ORG_CD
		AND C.TENANT_ID = ot.TENANT_ID
	</update>


	<update id="SYSM130UPT02" parameterType="SYSM130VO">
		WITH RECURSIVE OrgTree AS (
			-- 첫 번째 단계: 주어진 ORG_CD로 시작
			SELECT ORG_CD
			FROM T_ORG_CD
			WHERE TENANT_ID = #{tenantId} AND ORG_CD = #{orgCd}

			UNION ALL

			-- 두 번째 단계: 자식 노드를 찾음 (HGRK_ORG_CD가 부모 ORG_CD와 일치)
			SELECT T.ORG_CD
			FROM T_ORG_CD T
			JOIN OrgTree OT ON T.HGRK_ORG_CD = OT.ORG_CD
			WHERE T.TENANT_ID = #{tenantId}
		)
		UPDATE T_ORG_CD
		SET ORG_ST_CD = #{orgStCd}
		WHERE TENANT_ID = #{tenantId}
		AND ORG_CD IN (SELECT ORG_CD FROM OrgTree)
	</update>

	<update id="SYSM130UPT03" parameterType="SYSM130VO">
		UPDATE T_ORG_CD
		SET
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(orgDvCd)'>
			ORG_DV_CD		= #{orgDvCd},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(orgNm)'>
			ORG_NM  		= #{orgNm},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(prsLvlCd)'>
			PRS_LVL_CD 		= #{prsLvlCd},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(hgrkOrgCd)'>
			HGRK_ORG_CD 	= #{hgrkOrgCd},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(extnLinkCd)'>
			EXTN_LINK_CD  	= #{extnLinkCd},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(orgStCd)'>
			ORG_ST_CD 		= #{orgStCd},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(kmsDispYn)'>
			KMS_DISP_YN 	= #{kmsDispYn},
		</if>
		<if test='!@bcs.aicrm.broadcns.util.com.ComnFun@isEmpty(kmsCtgrNo)'>
			KMS_CTGR_NO 	= #{kmsCtgrNo},
		</if>
		LST_CORC_DTM		= CURRENT_TIMESTAMP,
		LST_CORPR_ID		= #{lstCorprId},
		LST_CORPR_ORG_CD	= #{lstCorprOrgCd}
		WHERE 1=1
		AND TENANT_ID		= #{tenantId}
		AND ORG_CD 		= #{orgCd}
	</update>

	<delete id="SYSM130DEL01" parameterType="SYSM130VO">
		DELETE FROM t_org_cd
		WHERE 1=1
		  AND TENANT_ID		= #{tenantId}
		  AND ORG_CD 		= #{orgCd}
		  AND ORG_ST_CD 	= 'N'
	</delete>

	<update id="SYSM130UPT04" parameterType="java.util.HashMap">
		UPDATE T_ORG_CD
		SET SRT_SEQ = CASE
						  WHEN ORG_CD = #{selectItem.orgCd}	THEN #{targetItem.srtSeq}::NUMERIC
						 WHEN ORG_CD = #{targetItem.orgCd}	THEN #{selectItem.srtSeq}::NUMERIC
		END
		WHERE ORG_CD IN (#{selectItem.orgCd}, #{targetItem.orgCd})
		AND TENANT_ID = #{selectItem.tenantId}
	</update>


	<select id="SYSM130SEL02" parameterType="java.util.HashMap" resultType="SYSM130VO">
		WITH RECURSIVE orgs AS (
			-- 1단계: 선택된 항목(본인)을 찾음
			SELECT org_cd, org_nm, prs_lvl_cd, hgrk_org_cd, srt_seq
			FROM T_ORG_CD
			WHERE tenant_id = #{selectItem.tenantId} AND org_cd = #{selectItem.orgCd}

			UNION ALL

			-- 2단계: 자식 항목을 재귀적으로 찾아냄
			SELECT o.org_cd, o.org_nm, o.prs_lvl_cd, o.hgrk_org_cd, o.srt_seq
			FROM T_ORG_CD o
			INNER JOIN orgs c ON o.hgrk_org_cd = c.org_cd
			WHERE o.tenant_id = #{selectItem.tenantId}
		)

		-- 결과 출력
		SELECT
		    org_cd AS orgCd
			,org_nm AS orgNm
			,prs_lvl_cd AS prsLvlCd
			,hgrk_org_cd AS hgrkOrgCd
			,srt_seq AS srtSeq
		FROM orgs
	</select>
	<select id="SYSM130SEL03" parameterType="java.util.HashMap" resultType="SYSM130VO">
		WITH RECURSIVE target_orgs AS (
			-- 1단계: 선택된 항목(본인)을 찾음
			SELECT org_cd, org_nm, prs_lvl_cd, hgrk_org_cd, srt_seq
			FROM T_ORG_CD
			WHERE tenant_id = #{targetItem.tenantId} AND org_cd = #{targetItem.orgCd}

			UNION ALL

			-- 2단계: 자식 항목을 재귀적으로 찾아냄
			SELECT o.org_cd, o.org_nm, o.prs_lvl_cd, o.hgrk_org_cd, o.srt_seq
			FROM T_ORG_CD o
			INNER JOIN target_orgs c ON o.hgrk_org_cd = c.org_cd
			WHERE o.tenant_id = #{targetItem.tenantId}
		)

		-- 결과 출력
		SELECT
		    org_cd AS orgCd
			,org_nm AS orgNm
			,prs_lvl_cd AS prsLvlCd
			,hgrk_org_cd AS hgrkOrgCd
			,srt_seq AS srtSeq
		FROM target_orgs
	</select>

</mapper>
